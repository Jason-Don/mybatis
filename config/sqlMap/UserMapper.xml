<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="test">

    <!-- 在 映射文件中配置很多sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询
    id：标识 映射文件中的 sql
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入 参数的类型，这里指定int型
    #{}表示一个 占位 符号
    #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
     -->
    <select id="findUserById" parameterType="int" resultType="cn.com.itcast.mybatis.demo01.pojo.User">
        select * from user where id=#{id}
    </select>

    <!--根据用户名称查询用户信息-->
    <!--
    resultType: 指定的是单条记录所映射的java对象
    ${} 表示 拼接 符,将收到的参数无修饰的拼到sql中
    使用${} 易引起sql注入
    ${value}：接收输入参数的内容；如果传入参数类型是简单数据类型，${}中只能使用value；
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.com.itcast.mybatis.demo01.pojo.User">
        select * from user where username like '%${value}%'
    </select>

</mapper>


